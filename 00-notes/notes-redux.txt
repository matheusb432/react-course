===  Redux

  ==  Setup

    >>  Redux
      >>  npm i redux

    >>  React Redux
      >>  npm i react-redux

    >>  Redux Toolkit
      >>  npm i @reduxjs/toolkit
        --  '@reduxjs/toolkit' already includes the 'redux' package


  ==  Core Concepts

    --  Redux is a flux-like state management library for cross-component or app-wide state management.

    --  Just like React Context, can be a great, often better, alternative for prop drilling, and is a much more scalable state management solution

    --  Redux has only one central data store, where all state is stored.


  ==  Advantages

    --  Highly scalable

    --  Performant and built for highly frequent state updates


  ==  Data Communication

    ==  Core Data Flow
      >>  Component > Dispatch(Action) > Reducer Function > Store > Components
        1.  A component dispatches an action
        2.  That action is forwarded to the reducer function
        3.  The reducer function reduces the input data
        4.  The store gets mutated by the reducer and now has a new state 
        5.  Subscribing components are notified so they can update their UI 

    --  For components to communicate with the store, a subscription is setup so whenever the data changes the store notifies components so that components get the data to use it.

    --  Components NEVER directly manipulate the store data, the store data is immutable and has an unidirectional data flow

    --  For the store data to be mutated/changed, it must be through dispatched Actions that trigger Reducer Functions 
      ::  Reducer Functions are a general concept that mean functions that can take an input and reduce it to a new output

      ::  Actions are an object that has data which describes an operation that the reducer function will perform


  ==  Crucial Best Practices

    --  The existing state should NEVER be mutated, so in reducer functions it's crucial that actions only create a new state object which will overwrite the existing state to update it.
      --  Mutating state can lead to unexpected side effects, such as the state being out of sync and the UI failing to update on a state change.

    --  Reducer functions MUST be pure, side-effect free and synchronous.
      ::  Pure functions -> https://en.wikipedia.org/wiki/Pure_function

      --  On Redux's case, it means that for any reducer function given the same arguments, so the old state and the action object, the new state output should always be the same.

    --  Store values should always be serializable values to assure no data is being accidentally mutated, so no store values can be class instances, for example.
      ::  https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data 


  ==  Redux Toolkit
    >>  https://redux-toolkit.js.org/tutorials/quick-start

    --  The Redux Toolkit package is intended to be the standard way to write Redux logic. It was originally created to help address three common concerns about Redux:
      1.  "Configure a Redux store is too complicated"
      2. "I have to add a lot packages to get Redux to do anything useful"
      3. "Redux requires too much boilerplate code"

    --  To do that, the toolkit essentially makes it easier to write Redux code and are benefial to all Redux users.


  ==  Side Effects & Async Tasks

    ==  Where should side effects & async tasks be executed in React?
      >>  Inside the components via useEffect()

      OR

      >>  Inside the action creators  

